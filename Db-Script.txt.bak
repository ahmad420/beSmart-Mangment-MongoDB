#1)beSmart-Mangment-MongoDB
--------------------------------------
use beSmart-Mangment

db.createCollection("Warehouse")

db.createCollection("Department")

db.createCollection("Rack")

db.createCollection("Shelve")

db.createCollection("Product")

db.createCollection("Package")

db.createCollection("Stock")

db.createCollection("Worker")

db.createCollection("Supplier")

db.createCollection("Client")

show collections  


#2)******Data Inesrtion into collections******

db.Warehouse.insertMany([
  {
    WarehouseId: 1,
    name: "מחסן היבואים",
    location: "תל אביב"
  },
  {
    WarehouseId: 2,
    name: "מחסן הציוד",
    location: "חיפה"
  },
  {
    WarehouseId: 3,
    name: "מחסן המזון",
    location: "ירושלים"
  }
]);


db.Department.insertMany([
  {
    DepartmentId: 1,
    DepartmentName: "מחלקת מכירות",
    manager: "אלישע כהן",
	workersCount: 24,
    size: 200,
    status: "active",
    WarehouseId: 1
  },
  {
    DepartmentId: 2,
    DepartmentName: "מחלקת פיתוח",
    manager: "רועי לוי",
	workersCount: 30,
    size: 325,
    status: "active",
    WarehouseId: 2
  },
  {
    DepartmentId: 3,
    DepartmentName: "מחלקת פיננסים",
    manager: "מיכאל כהן",
	workersCount: 15,
    size: 200,
    status: "inactive",
    WarehouseId: 1
  },
  {
    DepartmentId: 4,
    DepartmentName: "מחלקת איכות",
    manager: "שרית כהן",
	workersCount: 43,
    size: 400,
    status: "active",
    WarehouseId: 1
  },
  {
    DepartmentId: 5,
    DepartmentName: "מחלקת שיווק",
    manager: "דנה לוי",
	workersCount: 65,
    size: 350,
    status: "active",
    WarehouseId: 2
  },
  {
    DepartmentId: 6,
    DepartmentName: "מחלקת הנדסה",
    manager: "עמית כהן",
	workersCount: 87,
    size: 600,
    status: "active",
    WarehouseId: 3
  },
  {
    DepartmentId: 7,
    DepartmentName: "מחלקת משאבי אנוש",
    manager: "רחל לוי",
	workersCount: 14,
    size: 200,
    status: "inactive",
    WarehouseId: 3
  },
  {
    DepartmentId: 8,
    DepartmentName: "מחלקת IT",
    manager: "יוסי כהן",
	workersCount: 65,
    size: 250,
    status: "active",
    WarehouseId: 2
  },
  {
    DepartmentId: 9,
    DepartmentName: "מחלקת תפעול",
    manager: "משה לוי",
	workersCount: 157,
    size: 5480,
    status: "active",
    WarehouseId: 3
  },
  {
    DepartmentId: 10,
    DepartmentName: "מחלקת מחקר ופיתוח",
    manager: "רחל כהן",
	workersCount: 20,
    size: 380,
    status: "active",
    WarehouseId: 1
  },
  
]);




db.Rack.insertMany([
  {
    RackId: 1,
    number: "ראק 101",
    barcode: "123456789",
    location_description: "פינה שמאלית",
    DepartmentId: 9
  },
  {
    RackId: 2,
    number: "ראק 102",
    barcode: "987654321",
    location_description: "פינה ימנית",
    DepartmentId: 9
  },
  {
    RackId: 3,
    number: "ראק 103",
    barcode: "567890123",
    location_description: "אמצע",
    DepartmentId: 9
  },
  {
    RackId: 4,
    number: "ראק 104",
    barcode: "456123789",
    location_description: "פינה שמאלית",
    DepartmentId: 9
  },
  {
    RackId: 5,
    number: "ראק 105",
    barcode: "789321456",
    location_description: "פינה ימנית",
    DepartmentId: 9
  },
  {
    RackId: 6,
    number: "ראק 106",
    barcode: "654789321",
    location_description: "אמצע",
    DepartmentId: 9
  },
  {
    RackId: 7,
    number: "ראק 107",
    barcode: "321456789",
    location_description: "פינה שמאלית",
    DepartmentId: 9
  },
  {
    RackId: 8,
    number: "ראק 108",
    barcode: "789654321",
    location_description: "פינה ימנית",
    DepartmentId: 9
  },
  {
    RackId: 9,
    number: "ראק 109",
    barcode: "456789123",
    location_description: "אמצע",
    DepartmentId: 9
  },
  {
    RackId: 10,
    number: "ראק 110",
    barcode: "123321789",
    location_description: "פינה שמאלית",
    DepartmentId: 9
  },
  {
    RackId: 11,
    number: "ראק 111",
    barcode: "789123321",
    location_description: "פינה ימנית",
    DepartmentId: 9
  },
  {
    RackId: 12,
    number: "ראק 112",
    barcode: "321789123",
    location_description: "אמצע",
    DepartmentId: 9
  },
  {
    RackId: 13,
    number: "ראק 113",
    barcode: "987123456",
    location_description: "פינה שמאלית",
    DepartmentId: 9
  },
  {
    RackId: 14,
    number: "ראק 114",
    barcode: "123987456",
    location_description: "פינה ימנית",
    DepartmentId: 9
  },
  {
    RackId: 15,
    number: "ראק 115",
    barcode: "456789321",
    location_description: "אמצע",
    DepartmentId: 9
  },
  {
    RackId: 16,
    number: "ראק 116",
    barcode: "654789123",
    location_description: "פינה שמאלית",
    DepartmentId: 9
  },
  {
    RackId: 17,
    number: "ראק 117",
    barcode: "123789456",
    location_description: "פינה ימנית",
    DepartmentId: 9
  },
  {
    RackId: 18,
    number: "ראק 118",
    barcode: "789456123",
    location_description: "אמצע",
    DepartmentId: 9
  },
  {
    RackId: 19,
    number: "ראק 119",
    barcode: "456123789",
    location_description: "פינה שמאלית",
    DepartmentId: 9
  },
  {
    RackId: 20,
    number: "ראק 120",
    barcode: "789321456",
    location_description: "פינה ימנית",
    DepartmentId: 9
  }
]);


// Shelf documents for RackId: 1
db.Shelf.insertMany([

  {
    ShelveId: 1,
    number: "מדף 1",
    shelve_barcode: "111111",
    location_description: "פינה עליונה",
    max_weight: 50,
    height: 40,
    width: 80,
    status: "יש מקום",
    RackId: 1
  },
  {
    ShelveId: 2,
    number: "מדף 2",
    shelve_barcode: "222222",
    location_description: "אמצע",
    max_weight: 40,
    height: 40,
    width: 80,
    status: "יש מקום",
    RackId: 1
  },
  {
    ShelveId: 3,
    number: "מדף 3",
    shelve_barcode: "333333",
    location_description: "פינה תחתונה",
    max_weight: 60,
    height: 40,
    width: 80,
    status: "מלא",
    RackId: 1
  },
  {
    ShelveId: 4,
    number: "מדף 4",
    shelve_barcode: "444444",
    location_description: "פינה ימנית",
    max_weight: 55,
    height: 40,
    width: 80,
    status: "מלא",
    RackId: 1
  },
  {
    ShelveId: 5,
    number: "מדף 5",
    shelve_barcode: "555555",
    location_description: "פינה שמאלית",
    max_weight: 45,
    height: 40,
    width: 80,
    status: "מלא",
    RackId: 1
  }
]);



// Define the Shelf collection and insert more documents for RackId: 2
db.Shelf.insertMany([

  {
    ShelveId: 5,
    number: "מדף 1",
    shelve_barcode: "555555",
    location_description: "פינה תחתונה",
    max_weight: 70,
    height: 25,
    width: 90,
    status: "יש מקום",
    RackId: 2
  },
  {
    ShelveId: 6,
    number: "מדף 2",
    shelve_barcode: "666666",
    location_description: "פינה עליונה",
    max_weight: 55,
    height: 25,
    width: 90,
    status: "יש מקום",
    RackId: 2
  },
  {
    ShelveId: 7,
    number: "מדף 3",
    shelve_barcode: "777777",
    location_description: "אמצע",
    max_weight: 45,
    height: 25,
    width: 90,
    status: "יש מקום",
    RackId: 2
  },
  {
    ShelveId: 8,
    number: "מדף 4",
    shelve_barcode: "888888",
    location_description: "פינה תחתונה",
    max_weight: 65,
    height: 35,
    width: 110,
    status: "יש מקום",
    RackId: 2
  }

]);

// Shelf documents for RackId: 15

db.Shelf.insertMany([
  
  {
    ShelveId: 21,
    number: "מדף 1",
    shelve_barcode: "211111",
    location_description: "פינה עליונה",
    max_weight: 500,
    height: 200,
    width: 150,
    status: "יש מקום",
    RackId: 15
  },
  {
    ShelveId: 22,
    number: "מדף 2",
    shelve_barcode: "222222",
    location_description: "אמצע",
    max_weight: 400,
    height: 200,
    width: 100,
    status: "מלא",
    RackId: 15
  }
]);


-----------------------------------------------

db.Product.insertMany([
  {
    ProductId: 1,
    barcode: "123456789",
    name: "מכונת קפה אוטומטית",
    weight: 5.2,
    category: "מטבח",
    description: "מכונת קפה אוטומטית להכנת קפה טעים",
    price: 1200,
    status: "active",
    stockid: 1
  },
  {
    ProductId: 2,
    barcode: "987654321",
    name: "שמלת ערב נפלאה",
    weight: 0.8,
    category: "בגדים",
    description: "שמלת ערב מרהיבה לאירועים מיוחדים",
    price: 350,
    status: "active",
    stockid: 2
  },
  {
    ProductId: 3,
    barcode: "111222333",
    name: "סט מקולקציית כלי עבודה",
    weight: 2.0,
    category: "כלי עבודה",
    description: "סט מקולקציית כלי עבודה כולל מברג, מסמרות ועוד",
    price: 120,
    status: "active",
    stockid: 1
  },
  {
    ProductId: 4,
    barcode: "444555666",
    name: "גיטרת אקוסטית מקצועית",
    weight: 1.5,
    category: "כלי נגינה",
    description: "גיטרה אקוסטית מקצועית לנגינה בכל הזמנים",
    price: 600,
    status: "active",
    stockid: 3
  },
  {
    ProductId: 5,
    barcode: "777888999",
    name: "ספר 'המרד השלישי'",
    weight: 0.6,
    category: "ספרים",
    description: "ספר מרתק שמתאר את המרד השלישי בצרפת",
    price: 45,
    status: "active",
    stockid: 2
  },
  {
    ProductId: 6,
    barcode: "101112131",
    name: "פאזל 1000 חלקים",
    weight: 0.3,
    category: "צעצועים",
    description: "פאזל מאתגר עם 1000 חלקים להנאת הכלבים",
    price: 70,
    status: "active",
    stockid: 1
  },
  {
    ProductId: 7,
    barcode: "181920212",
    name: "מסיכת פנים משומנת",
    weight: 0.1,
    category: "קוסמטיקה",
    description: "מסיכת פנים משומנת לניקוי יסודי והרגעת העור",
    price: 25,
    status: "active",
    stockid: 3
  },
  {
    ProductId: 8,
    barcode: "181920212",
    name: "קרם לחות לפנים",
    weight: 0.1,
    category: "קוסמטיקה",
    description: "קרם לחות איכותי להרגעת העור",
    price: 50,
    status: "active",
    stockid: 3
  },
  {
    ProductId: 9,
    barcode: "222333444",
    name: "סט סכינים מקצועי",
    weight: 1.2,
    category: "כלים",
    description: "סט סכינים מקצועי למטבח",
    price: 180,
    status: "active",
    stockid: 1
  },
  {
    ProductId: 10,
    barcode: "555666777",
    name: "מחשב נייד מתקדם",
    weight: 1.8,
    category: "מחשבים",
    description: "מחשב נייד מתקדם עם תצוגה ברורה ויעילה",
    price: 1500,
    status: "active",
    stockid: 2
  }
]);

db.Product.insertOne({
  ProductId: 11,
  name: "מוצר 11",
  properties: {
    material: "פלסטיק",
    country: "ישראל"
  },
  related_products: [2, 4, 7]
});



db.Stock.insertMany([
  {
    StockId: 1,
    quantity: 100,
    supplierId: 1,
    status: "in stock"
  },
  {
    StockId: 2,
    quantity: 50,
    supplierId: 2,
    status: "in stock"
  },
  {
    StockId: 3,
    quantity: 200,
    supplierId: 3,
    status: "in stock"
  },
  {
    StockId: 4,
    quantity: 75,
    supplierId: 4,
    status: "in stock"
  },
  {
    StockId: 5,
    quantity: 120,
    supplierId: 5,
    status: "in stock"
  },
  {
    StockId: 6,
    quantity: 30,
    supplierId: 6,
    status: "in stock"
  },
  {
    StockId: 7,
    quantity: 80,
    supplierId: 7,
    status: "in stock"
  },
  {
    StockId: 8,
    quantity: 150,
    supplierId: 8,
    status: "in stock"
  },
  {
    StockId: 9,
    quantity: 60,
    supplierId: 9,
    status: "in stock"
  },
  {
    StockId: 10,
    quantity: 90,
    supplierId: 10,
    status: "in stock"
  }
]);


db.Worker.insertMany([
  {
    WorkerId: 1,
    ID_number: "123456789",
    first_name: "ישראל",
    last_name: "כהן",
    phone_number: "0501234567",
    email: "israel@example.com",
    encrypted_password: "encrypted123",
    birth_date: new Date("1990-01-15"),
    joining_date: new Date("2020-03-10"),
    monthly_salary: 8000,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 9
  },
  {
    WorkerId: 2,
    ID_number: "987654321",
    first_name: "שרה",
    last_name: "לוי",
    phone_number: "0529876543",
    email: "sara@example.com",
    encrypted_password: "encrypted456", 
    birth_date: new Date("1985-05-20"),
    joining_date: new Date("2018-07-01"),
    monthly_salary: 9500,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 8
  },
  {
    WorkerId: 3,
    ID_number: "111222333",
    first_name: "אברהם",
    last_name: "כהן",
    phone_number: "0541112222",
    email: "avraham@example.com",
    encrypted_password: "encrypted789",
    birth_date: new Date("1988-10-03"),
    joining_date: new Date("2019-02-18"),
    monthly_salary: 8500,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 5
  },
  {
    WorkerId: 4,
    ID_number: "444555666",
    first_name: "רחל",
    last_name: "לוי",
    phone_number: "0524445555",
    email: "rachel@example.com",
    encrypted_password: "encrypted012", 
    birth_date: new Date("1992-09-25"),
    joining_date: new Date("2021-01-05"),
    monthly_salary: 8800,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 4
  },
  {
    WorkerId: 5,
    ID_number: "777888999",
    first_name: "דניאל",
    last_name: "כהן",
    phone_number: "0537778888",
    email: "daniel@example.com",
    encrypted_password: "encrypted345", 
    birth_date: new Date("1995-03-12"),
    joining_date: new Date("2017-11-22"),
    monthly_salary: 9200,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 3
  },
  {
    WorkerId: 6,
    ID_number: "101112131",
    first_name: "לאה",
    last_name: "לוי",
    phone_number: "0511011121",
    email: "leah@example.com",
    encrypted_password: "encrypted678", 
    birth_date: new Date("1989-12-08"),
    joining_date: new Date("2016-06-30"),
    monthly_salary: 8100,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 1
  },
  {
    WorkerId: 7,
    ID_number: "141516171",
    first_name: "משה",
    last_name: "כהן",
    phone_number: "0501415161",
    email: "moshe@example.com",
    encrypted_password: "encrypted901", 
    birth_date: new Date("1991-07-17"),
    joining_date: new Date("2015-04-12"),
    monthly_salary: 8700,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 1
  },
  {
    WorkerId: 8,
    ID_number: "181920212",
    first_name: "שושנה",
    last_name: "לוי",
    phone_number: "0541819202",
    email: "shoshana@example.com",
    encrypted_password: "encrypted345",
    birth_date: new Date("1987-04-28"),
    joining_date: new Date("2014-09-03"),
    monthly_salary: 8900,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 2
  },
  {
    WorkerId: 9,
    ID_number: "222333444",
    first_name: "איתן",
    last_name: "כהן",
    phone_number: "0522223333",
    email: "eitan@example.com",
    encrypted_password: "encrypted678",
    birth_date: new Date("1993-11-02"),
    joining_date: new Date("2013-12-19"),
    monthly_salary: 8400,
    status: "active",
    position: "מנהל מחלקה",
    DepartmentId: 2
	
  },
  {
    WorkerId: 10,
    ID_number: "555666777",
    first_name: "מרים",
    last_name: "לוי",
    phone_number: "0515556666",
    email: "miriam@example.com",
    encrypted_password: "encrypted901",
    birth_date: new Date("1994-06-09"),
    joining_date: new Date("2012-08-14"),
    monthly_salary: 9100,
    status: "active",
    position: "עובד מחלקה",
    DepartmentId: 2
  }
]);



db.Supplier.insertMany([
  {
    supplierId: 1,
    supplier_number: "123456789",
    name: "ספק 1",
    phone_number: "0501234567",
    email: "supplier1@example.com",
    status: "active"
  },
  {
    supplierId: 2,
    supplier_number: "987654321",
    name: "ספק 2",
    phone_number: "0529876543",
    email: "supplier2@example.com",
    status: "active"
  },
  {
    supplierId: 3,
    supplier_number: "111222333",
    name: "ספק 3",
    phone_number: "0541112222",
    email: "supplier3@example.com",
    status: "active"
  },
  {
    supplierId: 4,
    supplier_number: "444555666",
    name: "ספק 4",
    phone_number: "0524445555",
    email: "supplier4@example.com",
    status: "active"
  },
  {
    supplierId: 5,
    supplier_number: "777888999",
    name: "ספק 5",
    phone_number: "0537778888",
    email: "supplier5@example.com",
    status: "active"
  },
  {
    supplierId: 6,
    supplier_number: "101112131",
    name: "ספק 6",
    phone_number: "0511011121",
    email: "supplier6@example.com",
    status: "active"
  },
  {
    supplierId: 7,
    supplier_number: "141516171",
    name: "ספק 7",
    phone_number: "0501415161",
    email: "supplier7@example.com",
    status: "active"
  },
  {
    supplierId: 8,
    supplier_number: "181920212",
    name: "ספק 8",
    phone_number: "0541819202",
    email: "supplier8@example.com",
    status: "active"
  },
  {
    supplierId: 9,
    supplier_number: "222333444",
    name: "ספק 9",
    phone_number: "0522223333",
    email: "supplier9@example.com",
    status: "active"
  },
  {
    supplierId: 10,
    supplier_number: "555666777",
    name: "ספק 10",
    phone_number: "0515556666",
    email: "supplier10@example.com",
    status: "active"
  }
]);





db.Client.insertMany([
  {
    ClientId: 1,
    Client_name: "לקוח 1",
    phone_number: "0501234567",
    email: "client1@example.com",
    status: "active",
    location: "תל אביב",
    address: "רחוב הרצל 1"
  },
  {
    ClientId: 2,
    Client_name: "לקוח 2",
    phone_number: "0529876543",
    email: "client2@example.com",
    status: "active",
    location: "ירושלים",
    address: "רחוב יפו 10"
  },
  {
    ClientId: 3,
    Client_name: "לקוח 3",
    phone_number: "0541112222",
    email: "client3@example.com",
    status: "active",
    location: "חיפה",
    address: "רחוב החורב 5"
  },
  {
    ClientId: 4,
    Client_name: "לקוח 4",
    phone_number: "0524445555",
    email: "client4@example.com",
    status: "active",
    location: "באר שבע",
    address: "רחוב הנגב 20"
  },
  {
    ClientId: 5,
    Client_name: "לקוח 5",
    phone_number: "0537778888",
    email: "client5@example.com",
    status: "active",
    location: "אשדוד",
    address: "רחוב החוף 15"
  },
  {
    ClientId: 6,
    Client_name: "לקוח 6",
    phone_number: "0511011121",
    email: "client6@example.com",
    status: "active",
    location: "רחובות",
    address: "רחוב המשוררים 8"
  },
  {
    ClientId: 7,
    Client_name: "לקוח 7",
    phone_number: "0501415161",
    email: "client7@example.com",
    status: "active",
    location: "נתניה",
    address: "רחוב הנמל 3"
  },
  {
    ClientId: 8,
    Client_name: "לקוח 8",
    phone_number: "0541819202",
    email: "client8@example.com",
    status: "active",
    location: "חדרה",
    address: "רחוב הכינרת 12"
  },
  {
    ClientId: 9,
    Client_name: "לקוח 9",
    phone_number: "0522223333",
    email: "client9@example.com",
    status: "active",
    location: "אילת",
    address: "רחוב האילת 30"
  },
  {
    ClientId: 10,
    Client_name: "לקוח 10",
    phone_number: "0515556666",
    email: "client10@example.com",
    status: "active",
    location: "טבריה",
    address: "רחוב הכנרת 7"
  }
]);


db.Client.insert({
  ClientId: 11,
  Client_name: "לקוח 11",
  phone_number: "0501234567",
  email: "client1@example.com",
  status: "active",
  location: "תל אביב",
  address: "רחוב הרצל 1"
});






db.Package.insertMany([
  {
    PackageId: 1,
    Package_barcode: "123456789",
    clientId: 1,
    status: "pending"
  },
  {
    PackageId: 2,
    Package_barcode: "987654321",
    clientId: 2,
    status: "delivered"
  },
  {
    PackageId: 3,
    Package_barcode: "111222333",
    clientId: 3,
    status: "processing"
  },
  {
    PackageId: 4,
    Package_barcode: "444555666",
    clientId: 4,
    status: "pending"
  },
  {
    PackageId: 5,
    Package_barcode: "777888999",
    clientId: 5,
    status: "shipped"
  },
  {
    PackageId: 6,
    Package_barcode: "101112131",
    clientId: 6,
    status: "processing"
  },
  {
    PackageId: 7,
    Package_barcode: "141516171",
    clientId: 7,
    status: "delivered"
  },
  {
    PackageId: 8,
    Package_barcode: "181920212",
    clientId: 8,
    status: "pending"
  },
  {
    PackageId: 9,
    Package_barcode: "222333444",
    clientId: 9,
    status: "shipped"
  },
  {
    PackageId: 10,
    Package_barcode: "555666777",
    clientId: 10,
    status: "processing"
  }
]);


db.Package.insertOne({
  PackageId: 11,
  Package_barcode: "123456789",
  clientId: 1,
  status: "pending"
});



#3)******* Functions Using JSON *******

const MongoClient = require('mongodb').MongoClient;

// Connection URL
const url = 'mongodb://localhost:27017';

// Database Name
const dbName = 'beSmart-Mangment';

// Create a new MongoClient
const client = new MongoClient(url);

// Connect to the server
client.connect(function(err) {
  if (err) {
    console.error('Error connecting to MongoDB:', err);
    return;
  }
  console.log('Connected to MongoDB server');

  const db = client.db(dbName);

  // Perform operations here

  // Close the connection
  client.close();
});



//Get total count of products in stock
function getTotalProductCount() {
  return db.products.count({ quantity: { $gt: 0 } });
}
//Test
var productCount = getTotalProductCount();
print("Total Product Count:", productCount);


// In the client.connect() callback
const collection = db.collection('Product');





// Update multiple documents in the collection
collection.updateMany(
  { category: 'קוסמטיקה' },
  { $set: { price: 20 } },
  function(err, result) {
    if (err) {
      console.error('Error updating documents:', err);
    } else {
      console.log('Documents updated:', result.modifiedCount);
    }
  }
);


// Insert a document into the collection
const collection = db.collection('Product');

collection.insertOne({
  name: 'Product 1',
  price: 10,
  quantity: 5,
  category: 'Electronics'
}, function(err, result) {
  if (err) {
    console.error('Error inserting document:', err);
  } else {
    console.log('Document inserted:', result.insertedId);
  }
});


// add a new worker to your MongoDB collection


var mongoClient = new MongoClient("mongodb://localhost:27017");
var db = mongoClient.getDB("your_database_name");
var workersCollection = db.getCollection("workers");

// Create a new worker document
var newWorker = {
  name: "ישראל כהן",
  position: "מהנדס תוכנה",
  department: "הנדסה",
  salary: 60000
};

// Insert the new worker document into the collection
workersCollection.insertOne(newWorker);
print("New worker added:", newWorker.name);

// Find and update a worker's salary
var workerToUpdate = workersCollection.findOne({ name: "ישראל כהן" });
if (workerToUpdate) {
  var newSalary = workerToUpdate.salary + 10000; // Increase salary by 10,000
  workersCollection.updateOne(
    { _id: workerToUpdate._id },
    { $set: { salary: newSalary } }
  );
  print("Updated salary for", workerToUpdate.name, "to", newSalary);
} else {
  print("Worker not found");
}

// Find a worker by name
var searchName = "ישראל כהן";
var foundWorker = workersCollection.findOne({ name: searchName });
if (foundWorker) {
  print("Found worker:", foundWorker.name, "- Position:", foundWorker.position);
} else {
  print("Worker not found");
}

// Close the MongoDB connection
mongoClient.close();



#4)**********Search/Retrieve Data**********

//find query with sorting for the "Product" collection
var products = db.Product.find({ price: { $gt: 50 } })
    .sort({ price: 1 })  // Sort by price in ascending order
    .limit(3)
    .toArray();

products.forEach(function(document) {
    printjson(document);
});



//documents with max_weight greater than 25, sorted  
var shelves = db.Shelf.find({ max_weight: { $gt: 25 } })
    .sort({ max_weight: -1 })
    .skip(3)
    .limit(3)
    .toArray();

shelves.forEach(function(document) {
    print(document.number);
});



// retrieve documents from the "Worker" collection where the "position" is either "עובד מחלקה" or "מנהל מחלקה", and then sort 

var query = {
    $or: [
        { position: "עובד מחלקה" },
        { position: "מנהל מחלקה" }
    ]
};

var workers = db.Worker.find(query)
    .sort({ monthly_salary: -1 })  // Sort by monthly_salary in descending order
    .toArray();

workers.forEach(function(document) {
    printjson(document);
});


#5.1)****** Updates *******


db.Package.updateMany(
  {},
  {
    $set: { status: "shipped" },
    $push: { status_changes: new Date() }
  }
);


// Update the name of a warehouse

db.Warehouse.updateOne(
  { WarehouseId: 1 },
  { $set: { name: "1 - מחסן היבואים" } }
);


// Update the status of all active departments to "inactive"
db.Department.updateMany(
  { status: "active" },
  { $set: { status: "inactive" } }
);



// Update the weight of a specific product
db.Product.updateOne(
  { ProductId: 1 },
  { $set: { weight: 6.0 } }
);

db.Product.update(
  { ProductId: 8 }, // Filter to find the specific product
  { $set: { name: "New Product" } } // Update the name field
);



// Define the new product document
var newProduct = {
  ProductId: 8,
  barcode: "32453145235323",
  name: "קרם לחות לפנים - מעודכן",
  weight: 0.2,
  category: "קוסמטיקה מעודכנת",
  description: "קרם לחות איכותי להרגעת עור מעודכן",
  price: 60,
  status: "active - מעודכן",
  stockid: 4
};

// Insert the new product document into the Product collection
db.Product.insertOne(newProduct);

print("New product added successfully");



//update a worker position to supervisor 

const workerIdToUpdate = 8; 

// Check if the worker with the specified workerId is already a supervisor
const worker = db.Workers.findOne({ workerId: workerIdToUpdate });

if (worker) {
  if (worker.position !== "supervisor") {
    // Worker is not a supervisor, update to the supervisor position
    db.Workers.updateOne(
      { workerId: workerIdToUpdate },
      {
        $set: { position: "supervisor" }
      }
    );
    print("Worker's position updated to supervisor");
  } else {
    print("Worker is already a supervisor");
  }
} else {
  print("Worker with the specified workerId does not exist");
}


const stockIdToUpdate = 1; 
const incrementValue = 12;    // The value by which to increment the stock quantity

// Check if the stock exists

const stock = db.Stock.findOne({ StockId: stockIdToUpdate });

if (stock) {
   // Stock exists, increment the quantity 

  db.Stock.updateOne(
    { StockId: stockIdToUpdate },
    {
      $inc: { quantity: incrementValue }
    }
  );
  print("Stock quantity updated");
} else {
  print("Stock not found");
}


#5.2)*******Deletions********


// Replicate Worker collection

function copyCollection(sourceCollection, targetCollection) {
    var cursor = db.getCollection(sourceCollection).find();
    while (cursor.hasNext()) {
        var doc = cursor.next();
        db.getCollection(targetCollection).insert(doc);
    }
    print("Data copied from " + sourceCollection + " to " + targetCollection);
}

copyCollection("Worker", "Worker_copy");



// Delete a specific worker
db.Worker_copy.deleteOne({ WorkerId: 1 });



// Drop a collection 
db.Worker_copy.drop();
print("Collection dropped: Worker_copy");


// Delete all products with a specific category
db.Product.deleteMany({ category: "קוסמטיקה" });

// remove a product from the Product

db.Product.remove({ ProductId: 8 });



//מחיקה של אוסף מלא או חלקי על פי קריטריונים רצויים
db.Package.aggregate([
  { $match: { status: "shipped" } },
  { $out: "Package_copy" }
]);


// Find documents with status "in stock" and supplierId 2
var outOfStockDocs = db.Stock.find({ status: "in stock", supplierId: 2 });

// Create a new collection and insert the found documents into it
outOfStockDocs.forEach(function(doc) {
  db.Stock_copy.insert(doc);
});

// Optional: Create an index on any field that improves query performance
// db.Stock_copy.createIndex({ field_name: 1 });


**********Rename**********

//rename collection
db.Worker.renameCollection("Workers_collection");




#6)**********aggregate**********

// Calculate the average of "monthly_salary" for each group

db.Worker.aggregate([
    {
        $group: {
            _id: "$position",  // Group by the "position" field
            avg_salary: { $avg: "$monthly_salary" }  
        }
    },
    {
        $sort: {
            avg_salary: -1  // Sort by average salary in descending order
        }
    }
]);

//display the total sales for each category along with the highest and lowest 

db.Product.aggregate([
    {
        $group: {
            _id: "$category",  // Group by the "category" field
            total_sales: { $sum: 1 },  // Calculate the total number of products in each category
            highest_price: { $max: "$price" },  // Calculate the highest price within each category
            lowest_price: { $min: "$price" }  // Calculate the lowest price within each category
        }
    },
    {
        $sort: {
            total_sales: -1  // Sort by total sales in descending order
        }
    }
]);

//retrieve manager names for each department:

db.Department.aggregate([
    {
        $group: {
            _id: "$DepartmentId",
            departmentName: { $first: "$DepartmentName" },
            managers: { $addToSet: "$manager" }
        }
    },
    {
        $project: {
            _id: 0,
            departmentName: 1,
            managers: 1
        }
    }
]);

//display the names of workers along with their ages and calculates the average age

db.Worker.aggregate([
    {
        $addFields: {
            age: {
                $divide: [
                    { $subtract: [new Date(), "$birth_date"] },
                    365 * 24 * 60 * 60 * 1000 // Convert milliseconds to years
                ]
            }
        }
    },
    {
        $group: {
            _id: null,
            avgAge: { $avg: "$age" },
            workers: {
                $push: {
                    name: { $concat: ["$first_name", " ", "$last_name"] },
                    age: { $floor: "$age" }
                }
            }
        }
    },
    {
        $project: {
            _id: 0,
            avgAge: 1,
            workers: 1
        }
    }
]);



#7)**********mapReduce**********

//calculate the total quantity of products for each category
db.Product.mapReduce(
    function() {
        emit(this.category, this.quantity);
    },
    function(key, values) {
        return Array.sum(values);
    },
    {
        out: "category_totals"
    }
);

//creating a list of worker names along with their ages 
db.Worker.mapReduce(
    function() {
        var birthDate = new Date(this.birth_date);
        var ageInYears = Math.floor((new Date() - birthDate) / (365 * 24 * 60 * 60 * 1000));
        emit("workerData", { name: this.first_name + " " + this.last_name, age: ageInYears });
    },
    function(key, values) {
        var totalAge = 0;
        var count = 0;
        values.forEach(function(value) {
            totalAge += value.age;
            count++;
        });
        return { avgAge: totalAge / count, workers: values };
    },
    {
        out: { inline: 1 }
    }
);

// calculate the average monthly salary for each department in the Worker collection

// Define the map function
var mapFunction = function() {
    emit(this.DepartmentId, { count: 1, totalSalary: this.monthly_salary });
};

// Define the reduce function
var reduceFunction = function(key, values) {
    var result = { count: 0, totalSalary: 0 };
    
    values.forEach(function(value) {
        result.count += value.count;
        result.totalSalary += value.totalSalary;
    });
    
    return result;
};

// Define the finalize function
var finalizeFunction = function(key, reducedValue) {
    return { 
        averageSalary: reducedValue.totalSalary / reducedValue.count,
        totalWorkers: reducedValue.count 
    };
};

// Run the mapReduce operation
db.Worker.mapReduce(
    mapFunction,
    reduceFunction,
    {
        out: "department_avg_salary",
        finalize: finalizeFunction
    }
);

// Find and print the results
db.department_avg_salary.find().forEach(function(doc) {
    print("DepartmentId: " + doc._id);
    print("Average Salary: " + doc.value.averageSalary);
    print("Total Workers: " + doc.value.totalWorkers);
    print("----------------------------");
});








